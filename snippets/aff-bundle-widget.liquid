<link
    rel="stylesheet"
    href="https://static.rechargecdn.com/assets/bundling-widget/src.css"
    referrerpolicy="origin">
  <script src="https://static.rechargecdn.com/assets/bundling-widget/src.js"></script>
  
  <style>
    .aff-card {
      background: var(--recharge-cards-background);
      border: 1px solid var(--recharge-cards-border-color);
      border-radius: var(--recharge-corners-radius);
      padding: 20px;
      line-height: 1.4;
    }
    .aff-button {
      background-color: var(--recharge-button-brand);
      border: 2px solid var(--recharge-button-brand);
      border-radius: var(--recharge-button-border-radius);
      color: var(--recharge-button-color) !important;
      font-size: var(--recharge-typography-size-5);
      font-weight: 600;
      line-height: 150%;
      padding: 10px 16px;
      text-align: center;
      cursor: pointer;
      display: inline-block;
    }
    .aff-button[disabled=true] {
      opacity: 0.6;
    }
    .aff-h3 {
      font-size: var(--recharge-typography-size-3);
      font-weight: bold;
      line-height: 123%;
    }
    .t-mb2 {
      margin-bottom: 8px;
    }
    .t-mb3 {
      margin-bottom: 16px;
    }
  </style>
  
  {% comment %} Slots {% endcomment %}
  <script type="text/html" data-recharge-slot="overview.header">
  <div id="affinity-bundle-section" class="aff-card t-mb3">
    <span class="aff-h3 t-mb2">Your box contents</span>
    <div id="affinity-bundle-widget" class="affinity-bundle-widget"></div>
    </div>  
  </script>
  
  <script>
  const rechargeAPI = {
    session: null,
  
    async authenticate() {
      if (!this.session) {
        this.session = await recharge.auth.loginCustomerPortal().catch(error => {
          console.error("Authentication failed:", error);
          throw error;
        });
      }
      return this.session;
    },
  
    async fetchSubscriptions() {
      const response = await recharge.subscription.listSubscriptions(this.session, {
        limit: 10,
        sort_by: 'id-asc',
        status: 'Active',
        include: 'bundle_product'
      }).catch(error => {
        console.error("Fetching subscriptions failed:", error);
        throw error;
      });
      return response.subscriptions;
    }
  };
  
  const bundlesWidgetManager = {
    wrapperContainerId: 'affinity-bundle-section',
    targetContainerId: 'affinity-bundle-widget',
  
    async getBundleSubscription() {
      const subscriptions = await rechargeAPI.fetchSubscriptions();
      return subscriptions.find(sub => sub.include.bundle_product);
    },
  
    mountWidget(subscriptionId) {
      window.BoxConfig = {
        containerId: this.targetContainerId,
        subscriptionConfig: { subscriptionId }
      };
      stateManager.refreshBundlesWidget();
      this.handleBundleUpdate();
      this.showWrapperSection();
    },
  
    showWrapperSection() {
      document.getElementById(this.wrapperContainerId).style.display = 'block';
    },
  
    handleBundleUpdate() {
      document.addEventListener(stateManager.widgetEventsToHandle.subscriptionUpdated, () => {
        stateManager.refreshBundlesWidget();
      });
    },
  
    async init() {
      try {
        await rechargeAPI.authenticate();
        const bundleSubscription = await this.getBundleSubscription();
        if (bundleSubscription) this.mountWidget(bundleSubscription.id);
      } catch (error) {
        console.error("Initialization failed:", error);
      }
    }
  };
  
  const stateManager = {
    widgetEventsToHandle: {
      subscriptionUpdated: "subscription:update"
    },
    widgetEventsToTrigger: {
      refresh: "Recharge::bundling-widget::reload"
    },
  
    dispatchEvent(eventName) {
      document.dispatchEvent(new CustomEvent(eventName));
    },
  
    refreshBundlesWidget() {
      this.dispatchEvent(this.widgetEventsToTrigger.refresh);
    }
  };
  
  document.addEventListener("Recharge::slot::mounted", event => {
    if (event.detail.name === "header" && event.detail.pathname === "/overview") {
      bundlesWidgetManager.init();
    }
  });
  </script>